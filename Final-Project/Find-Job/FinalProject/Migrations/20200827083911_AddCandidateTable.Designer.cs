// <auto-generated />
using System;
using FinalProject.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinalProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200827083911_AddCandidateTable")]
    partial class AddCandidateTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinalProject.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Image")
                        .HasMaxLength(250);

                    b.Property<DateTime>("Time");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Blogs");

                    b.HasData(
                        new { Id = 1, Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five", Image = "blog-1.jpg", Time = new DateTime(2020, 8, 27, 0, 0, 0, 0, DateTimeKind.Local), Title = "Back To Work Vacantion" },
                        new { Id = 2, Description = "lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries.But also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.But also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. But also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.more recently with desktop publishing", Image = "blog-2.jpg", Time = new DateTime(2020, 8, 27, 0, 0, 0, 0, DateTimeKind.Local), Title = "Job Motivational Quote" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("LocationId");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new { Id = 1, Fullname = "Martin Smith", Image = "avatar-1.jpg", LocationId = 1, Profession = "Content Writer" },
                        new { Id = 2, Fullname = "Karen Paren", Image = "avatar-2.jpg", LocationId = 1, Profession = "Reustaurant Manager" },
                        new { Id = 3, Fullname = "Phil Jones", Image = "avatar-3.jpg", LocationId = 2, Profession = "Bookkeeper" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = 1, Icon = "<i class='fas fa-hand-holding-usd'></i>", Name = "Accounting/Finance" },
                        new { Id = 2, Icon = "<i class='fas fa-graduation-cap'></i>", Name = "Education Training" },
                        new { Id = 3, Icon = "<i class='fas fa-hotel'></i>", Name = "Hotel" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new { Id = 1, Brand = "brand-1.png", Logo = "logo-1.png" },
                        new { Id = 2, Brand = "brand-2.png", Logo = "logo-2.png" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("Deadline");

                    b.Property<int>("LocationId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new { Id = 1, CategoryId = 3, CompanyId = 1, Deadline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), LocationId = 1, Name = "Green Development Marketer" },
                        new { Id = 2, CategoryId = 1, CompanyId = 2, Deadline = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), LocationId = 2, Name = "Restaurant General Manager" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new { Id = 1, Name = "Baku" },
                        new { Id = 2, Name = "Gandja" },
                        new { Id = 3, Name = "Sumgayit" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Icon")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new { Id = 1, Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod", Icon = "<i class='fas fa-briefcase'></i>", Title = "Advertise A Job" },
                        new { Id = 2, Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod", Icon = "<i class='fas fa-search'></i>", Title = "CV Search" },
                        new { Id = 3, Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod", Icon = "<i class='far fa-user'></i>", Title = "Recruiter Profiles" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Sliders");

                    b.HasData(
                        new { Id = 1, Image = "img-1.jpg" },
                        new { Id = 2, Image = "img-2.jpg" },
                        new { Id = 3, Image = "img-3.jpg" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Statistics");

                    b.HasData(
                        new { Id = 1, Icon = "<i class='far fa-user'></i>", Title = "Members" },
                        new { Id = 2, Icon = "<i class='fas fa-briefcase'></i>", Title = "Jobs" },
                        new { Id = 3, Icon = "<i class='far fa-file-alt'></i>", Title = "Resumes" },
                        new { Id = 4, Icon = "<i class='fas fa-industry'></i>", Title = "Companies" }
                    );
                });

            modelBuilder.Entity("FinalProject.Models.Candidate", b =>
                {
                    b.HasOne("FinalProject.Models.Location", "Location")
                        .WithMany("Candidates")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Models.Job", b =>
                {
                    b.HasOne("FinalProject.Models.Category", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Models.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Models.Location", "Location")
                        .WithMany("Jobs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
